// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: betakeys.proto

package betakeys

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeygenNotificationServiceClient is the client API for KeygenNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeygenNotificationServiceClient interface {
	EnviarNotificacion(ctx context.Context, in *KeyNotification, opts ...grpc.CallOption) (*KeygenResponse, error)
}

type keygenNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeygenNotificationServiceClient(cc grpc.ClientConnInterface) KeygenNotificationServiceClient {
	return &keygenNotificationServiceClient{cc}
}

func (c *keygenNotificationServiceClient) EnviarNotificacion(ctx context.Context, in *KeyNotification, opts ...grpc.CallOption) (*KeygenResponse, error) {
	out := new(KeygenResponse)
	err := c.cc.Invoke(ctx, "/betakeys.KeygenNotificationService/EnviarNotificacion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeygenNotificationServiceServer is the server API for KeygenNotificationService service.
// All implementations must embed UnimplementedKeygenNotificationServiceServer
// for forward compatibility
type KeygenNotificationServiceServer interface {
	EnviarNotificacion(context.Context, *KeyNotification) (*KeygenResponse, error)
	mustEmbedUnimplementedKeygenNotificationServiceServer()
}

// UnimplementedKeygenNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeygenNotificationServiceServer struct {
}

func (UnimplementedKeygenNotificationServiceServer) EnviarNotificacion(context.Context, *KeyNotification) (*KeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarNotificacion not implemented")
}
func (UnimplementedKeygenNotificationServiceServer) mustEmbedUnimplementedKeygenNotificationServiceServer() {
}

// UnsafeKeygenNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeygenNotificationServiceServer will
// result in compilation errors.
type UnsafeKeygenNotificationServiceServer interface {
	mustEmbedUnimplementedKeygenNotificationServiceServer()
}

func RegisterKeygenNotificationServiceServer(s grpc.ServiceRegistrar, srv KeygenNotificationServiceServer) {
	s.RegisterService(&KeygenNotificationService_ServiceDesc, srv)
}

func _KeygenNotificationService_EnviarNotificacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeygenNotificationServiceServer).EnviarNotificacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/betakeys.KeygenNotificationService/EnviarNotificacion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeygenNotificationServiceServer).EnviarNotificacion(ctx, req.(*KeyNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// KeygenNotificationService_ServiceDesc is the grpc.ServiceDesc for KeygenNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeygenNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "betakeys.KeygenNotificationService",
	HandlerType: (*KeygenNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarNotificacion",
			Handler:    _KeygenNotificationService_EnviarNotificacion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "betakeys.proto",
}

// BetakeysServiceClient is the client API for BetakeysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BetakeysServiceClient interface {
	NotifyRegionalServers(ctx context.Context, in *KeyNotification, opts ...grpc.CallOption) (*empty.Empty, error)
	SendResponseToRegionalServer(ctx context.Context, in *ResponseToRegionalServer, opts ...grpc.CallOption) (*empty.Empty, error)
}

type betakeysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBetakeysServiceClient(cc grpc.ClientConnInterface) BetakeysServiceClient {
	return &betakeysServiceClient{cc}
}

func (c *betakeysServiceClient) NotifyRegionalServers(ctx context.Context, in *KeyNotification, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/betakeys.BetakeysService/NotifyRegionalServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betakeysServiceClient) SendResponseToRegionalServer(ctx context.Context, in *ResponseToRegionalServer, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/betakeys.BetakeysService/SendResponseToRegionalServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetakeysServiceServer is the server API for BetakeysService service.
// All implementations must embed UnimplementedBetakeysServiceServer
// for forward compatibility
type BetakeysServiceServer interface {
	NotifyRegionalServers(context.Context, *KeyNotification) (*empty.Empty, error)
	SendResponseToRegionalServer(context.Context, *ResponseToRegionalServer) (*empty.Empty, error)
	mustEmbedUnimplementedBetakeysServiceServer()
}

// UnimplementedBetakeysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBetakeysServiceServer struct {
}

func (UnimplementedBetakeysServiceServer) NotifyRegionalServers(context.Context, *KeyNotification) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRegionalServers not implemented")
}
func (UnimplementedBetakeysServiceServer) SendResponseToRegionalServer(context.Context, *ResponseToRegionalServer) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResponseToRegionalServer not implemented")
}
func (UnimplementedBetakeysServiceServer) mustEmbedUnimplementedBetakeysServiceServer() {}

// UnsafeBetakeysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BetakeysServiceServer will
// result in compilation errors.
type UnsafeBetakeysServiceServer interface {
	mustEmbedUnimplementedBetakeysServiceServer()
}

func RegisterBetakeysServiceServer(s grpc.ServiceRegistrar, srv BetakeysServiceServer) {
	s.RegisterService(&BetakeysService_ServiceDesc, srv)
}

func _BetakeysService_NotifyRegionalServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetakeysServiceServer).NotifyRegionalServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/betakeys.BetakeysService/NotifyRegionalServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetakeysServiceServer).NotifyRegionalServers(ctx, req.(*KeyNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetakeysService_SendResponseToRegionalServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseToRegionalServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetakeysServiceServer).SendResponseToRegionalServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/betakeys.BetakeysService/SendResponseToRegionalServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetakeysServiceServer).SendResponseToRegionalServer(ctx, req.(*ResponseToRegionalServer))
	}
	return interceptor(ctx, in, info, handler)
}

// BetakeysService_ServiceDesc is the grpc.ServiceDesc for BetakeysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BetakeysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "betakeys.BetakeysService",
	HandlerType: (*BetakeysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRegionalServers",
			Handler:    _BetakeysService_NotifyRegionalServers_Handler,
		},
		{
			MethodName: "SendResponseToRegionalServer",
			Handler:    _BetakeysService_SendResponseToRegionalServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "betakeys.proto",
}
